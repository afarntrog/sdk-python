"""Agent result handling for SDK.

This module defines the AgentResult class which encapsulates the complete response from an agent's processing cycle.
"""

from dataclasses import dataclass
from typing import Any, Optional, Type, TypeVar

from pydantic import BaseModel

from ..telemetry.metrics import EventLoopMetrics
from ..types.content import Message
from ..types.streaming import StopReason

T = TypeVar("T", bound=BaseModel)


@dataclass
class AgentResult:
    """Represents the last result of invoking an agent with a prompt.

    Attributes:
        stop_reason: The reason why the agent's processing stopped.
        message: The last message generated by the agent.
        metrics: Performance metrics collected during processing.
        state: Additional state information from the event loop.
        structured_output: Parsed structured output when output_type was specified.
    """

    stop_reason: StopReason
    message: Message
    metrics: EventLoopMetrics
    state: Any
    structured_output: Optional[Any] = None

    def __str__(self) -> str:
        """Get the agent's last message as a string.

        This method extracts and concatenates all text content from the final message, ignoring any non-text content
        like images or structured data.

        Returns:
            The agent's last message as a string.
        """
        content_array = self.message.get("content", [])

        result = ""
        for item in content_array:
            if isinstance(item, dict) and "text" in item:
                result += item.get("text", "") + "\n"
        return result

    def get_structured_output(self, output_type: Type[T]) -> T:
        """Get structured output with type safety.

        Args:
            output_type: Expected output type for type checking

        Returns:
            Structured output cast to the expected type

        Raises:
            ValueError: If no structured output available or type mismatch
        """
        if self.structured_output is None:
            raise ValueError("No structured output available in this result")

        if not isinstance(self.structured_output, output_type):
            raise ValueError(
                f"Structured output type mismatch: expected {output_type.__name__}, "
                f"got {type(self.structured_output).__name__}"
            )

        return self.structured_output

    @property
    def has_structured_output(self) -> bool:
        """Check if this result contains structured output.

        Returns:
            True if structured output is available
        """
        return self.structured_output is not None
